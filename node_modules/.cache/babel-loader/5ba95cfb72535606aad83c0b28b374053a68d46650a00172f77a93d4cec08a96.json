{"ast":null,"code":"var _jsxFileName = \"/Users/sasha/Documents/new job/github/Desert-Adventure-Matching-Game/src/components/GameBoard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Card from './Card';\nimport _ from 'underscore';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameBoard = ({\n  flips,\n  setFlips,\n  matches,\n  setMatches\n}) => {\n  _s();\n  const [cards, setCards] = useState([]);\n  const [firstCard, setFirstCard] = useState(null);\n  const [secondCard, setSecondCard] = useState(null);\n  const [isChecking, setIsChecking] = useState(false); // To prevent fast clicks\n\n  // Load the audio files\n  const clickSound = new Audio('/audio/click.wav');\n  const matchSound = new Audio('/audio/match.wav');\n  const winSound = new Audio('/audio/win.wav');\n  useEffect(() => {\n    const cardClasses = [];\n    for (let i = 1; i <= 6; i++) {\n      cardClasses.push(`image-${i}`, `image-${i}`);\n    }\n    setCards(_.shuffle(cardClasses).map((imageClass, index) => ({\n      index,\n      imageClass,\n      isFlipped: false,\n      isMatched: false\n    })));\n  }, []);\n  const flipBackCards = (card1, card2) => {\n    setTimeout(() => {\n      setCards(prevCards => prevCards.map(card => card.index === card1.index || card.index === card2.index ? {\n        ...card,\n        isFlipped: false\n      } : card));\n      setIsChecking(false);\n    }, 1000);\n  };\n  const onCardFlipped = flippedCard => {\n    // Play the click sound when a card is flipped\n    clickSound.play();\n    if (isChecking || flippedCard.isFlipped || flippedCard.isMatched) {\n      return;\n    }\n    setCards(prevCards => prevCards.map(card => card.index === flippedCard.index ? {\n      ...card,\n      isFlipped: true\n    } : card));\n    setFlips(flips + 1);\n    if (!firstCard) {\n      setFirstCard(flippedCard);\n    } else if (!secondCard) {\n      setSecondCard(flippedCard);\n      setIsChecking(true);\n      if (firstCard.imageClass === flippedCard.imageClass) {\n        setMatches(matches + 1);\n        // Play match sound if the two cards match\n        matchSound.play();\n        setCards(prevCards => prevCards.map(card => card.imageClass === flippedCard.imageClass ? {\n          ...card,\n          isMatched: true\n        } : card));\n\n        // Check if all matches are found (end of the game)\n        if (matches + 1 === cards.length / 2) {\n          // Play win sound when all matches are found\n          winSound.play();\n        }\n        setFirstCard(null);\n        setSecondCard(null);\n        setIsChecking(false);\n      } else {\n        flipBackCards(firstCard, flippedCard);\n        setFirstCard(null);\n        setSecondCard(null);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"card-container\",\n    children: cards.map(card => /*#__PURE__*/_jsxDEV(Card, {\n      card: card,\n      onCardFlipped: onCardFlipped\n    }, card.index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n};\n_s(GameBoard, \"H5FovuwSn9ma3ikdZoJexQT6zwk=\");\n_c = GameBoard;\nexport default GameBoard;\nvar _c;\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"names":["React","useState","useEffect","Card","_","jsxDEV","_jsxDEV","GameBoard","flips","setFlips","matches","setMatches","_s","cards","setCards","firstCard","setFirstCard","secondCard","setSecondCard","isChecking","setIsChecking","clickSound","Audio","matchSound","winSound","cardClasses","i","push","shuffle","map","imageClass","index","isFlipped","isMatched","flipBackCards","card1","card2","setTimeout","prevCards","card","onCardFlipped","flippedCard","play","length","id","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/sasha/Documents/new job/github/Desert-Adventure-Matching-Game/src/components/GameBoard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Card from './Card';\nimport _ from 'underscore';  \n\nconst GameBoard = ({ flips, setFlips, matches, setMatches }) => {\n  const [cards, setCards] = useState([]);\n  const [firstCard, setFirstCard] = useState(null);\n  const [secondCard, setSecondCard] = useState(null);\n  const [isChecking, setIsChecking] = useState(false); // To prevent fast clicks\n\n  // Load the audio files\n  const clickSound = new Audio('/audio/click.wav');\n  const matchSound = new Audio('/audio/match.wav');\n  const winSound = new Audio('/audio/win.wav');\n\n  useEffect(() => {\n    const cardClasses = [];\n    for (let i = 1; i <= 6; i++) {\n      cardClasses.push(`image-${i}`, `image-${i}`);\n    }\n    setCards(\n      _.shuffle(cardClasses).map((imageClass, index) => ({\n        index,\n        imageClass,\n        isFlipped: false,\n        isMatched: false,\n      }))\n    );\n  }, []);\n\n  const flipBackCards = (card1, card2) => {\n    setTimeout(() => {\n      setCards((prevCards) =>\n        prevCards.map((card) =>\n          card.index === card1.index || card.index === card2.index\n            ? { ...card, isFlipped: false }\n            : card\n        )\n      );\n      setIsChecking(false);\n    }, 1000);\n  };\n\n  const onCardFlipped = (flippedCard) => {\n    // Play the click sound when a card is flipped\n    clickSound.play();\n\n    if (isChecking || flippedCard.isFlipped || flippedCard.isMatched) {\n      return;\n    }\n\n    setCards((prevCards) =>\n      prevCards.map((card) =>\n        card.index === flippedCard.index ? { ...card, isFlipped: true } : card\n      )\n    );\n    setFlips(flips + 1);\n\n    if (!firstCard) {\n      setFirstCard(flippedCard);\n    } else if (!secondCard) {\n      setSecondCard(flippedCard);\n      setIsChecking(true);\n\n      if (firstCard.imageClass === flippedCard.imageClass) {\n        setMatches(matches + 1);\n        // Play match sound if the two cards match\n        matchSound.play();\n\n        setCards((prevCards) =>\n          prevCards.map((card) =>\n            card.imageClass === flippedCard.imageClass\n              ? { ...card, isMatched: true }\n              : card\n          )\n        );\n\n        // Check if all matches are found (end of the game)\n        if (matches + 1 === cards.length / 2) {\n          // Play win sound when all matches are found\n          winSound.play();\n        }\n\n        setFirstCard(null);\n        setSecondCard(null);\n        setIsChecking(false);\n      } else {\n        flipBackCards(firstCard, flippedCard);\n        setFirstCard(null);\n        setSecondCard(null);\n      }\n    }\n  };\n\n  return (\n    <div id=\"card-container\">\n      {cards.map((card) => (\n        <Card key={card.index} card={card} onCardFlipped={onCardFlipped} />\n      ))}\n    </div>\n  );\n};\n\nexport default GameBoard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}